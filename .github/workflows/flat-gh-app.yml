
name: scraping app installations

on:
  push:
    paths:
      - .github/workflows/flat-gh-app.yml # Only run a new workflow every time this file (flat.yaml) file changes
      - flat/*
  workflow_dispatch:
    inputs:
      store: 
        type: string
        description: store directory path
  schedule:
    - cron: '0 0 1 * *' # Run this workflow every month on the first day of the month
    

jobs:
  app:
    runs-on: ubuntu-latest
    environment: flat-api-app
    env:
      store: ${{inputs.store || vars.STORE || format('store/{0}', vars.APP_ID) }}

    outputs:
      token: ${{ steps.token.outputs.token_base64 }}
      matrix: ${{ steps.set-matrix.outputs.installations }}
      environment: flat-api-app
      installations_path: ${{env.installations_path }}
    
    
    steps:

      - name: setup store
        id: path
        continue-on-error: true
        run: |
          echo "installations_path=${{env.store}}/installations" >> $GITHUB_ENV
          echo installations path is ${{env.installations_path}} >> $GITHUB_STEP_SUMMARY

      - name: Check out repo
        uses: actions/checkout@v3
  
      - name: Generate token
        id: generate_token
        uses: api-io/github-app-jwt@v1.2.3
        with:
          app_id: ${{ vars.APP_ID }}
          private_key: ${{ secrets.PRIVATE_KEY }}
     
      - name: Setup deno
        uses: denoland/setup-deno@main
        with:
          deno-version: v1.x 


      - name: ensure installation folder
        run: |
          mkdir -p ${{ env.installations_path}} >> $GITHUB_STEP_SUMMARY
          find ${{ env.installations_path}} 
          
      - name: fetch app  
        uses: githubocto/flat@v3
        env:
          AUTH:  ${{ steps.generate_token.outputs.authorization }}
        with:
          http_url: ${{github.api_url}}/app
          downloaded_filename: ${{env.store}}/app.json
          authorization: ${{ env.AUTH }}
          
          
          # The step is a Flat Action step. We fetch the installations of the app and save it at env.INSTALLATIONS_PATH
      - name: fetch app installations 
        uses: githubocto/flat@v3
        env:
          AUTH:  ${{ steps.generate_token.outputs.authorization }}
        with:
          http_url: ${{github.api_url}}/app/installations
          downloaded_filename: ${{env.installations_path}}/list.json
          authorization: ${{ env.AUTH }}
#          postprocess: .github/flat/app.ts

      - id: set-matrix
        run: |
          echo "installations=$(cat store/installations/list.json)" >> $GITHUB_OUTPUT 
#          gh secret set APP_TOKEN --body "${{ steps.generate_token.outputs.token }}" --env flat-api-app

        env:
          GH_TOKEN: ${{ github.token }}


  installation:
    needs: app
    runs-on: ubuntu-latest
    env:
      installation_path: ${{needs.app.outputs.installations_path}}/${{ matrix.value.id }}
    strategy:
      max-parallel: 1
      matrix:
        value: ${{fromJson(needs.app.outputs.matrix)}}

    environment: ${{needs.app.outputs.environment}}
    steps:

      - name: Check out repo
        uses: actions/checkout@v3

      - name: ensure installation folder
        run: mkdir -p ${{env.installation_path}}

#      - name: Generate token
#        id: generate_token
#        uses: api-io/github-app-jwt@v1.2.3
#        with:
#          app_id: ${{ vars.APP_ID }}
#          private_key: ${{ secrets.PRIVATE_KEY }}

#      - name: flat app installation
#        uses: githubocto/flat@v3
#        env:
#          AUTH: bearer ${{ steps.generate_token.outputs.token}}
#        with:
#          http_url: ${{github.api_url}}/app/installations/${{ matrix.value.id }}
#          downloaded_filename: ${{env.installation_path}}/index.json
#          authorization: ${{ env.AUTH }}
      
      - name: dispatches reload installation event
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          event-type: reload-installation
          client-payload: '{
            "type": "installation",
            "id": "${{ matrix.value.id }}",
            "src": "${{github.api_url}}/app/installations/${{ matrix.value.id }}",
            "environment": "${{needs.app.outputs.environment}}"
          }'
          

#      - name: create installation token
#        id: generate_token
#        uses: api-io/github-app-jwt@v1.2.4
#        with:
#          app_id: ${{ vars.APP_ID }}
#          private_key: ${{ secrets.PRIVATE_KEY }}
#          installation_id: ${{ matrix.value.id }}
#
#      - name: Setup deno
#        uses: denoland/setup-deno@main
#        with:
#          deno-version: v1.x
#      
#      - name: create or update repositories for each installation
#        uses: githubocto/flat@v3
#        env:
#          AUTH:  ${{ steps.generate_token.outputs.authorization }}
#          META: ${{toJSON(matrix.value)}}
#        with:
#          http_url: ${{ matrix.value.repositories_url}}
#          downloaded_filename: ${{ matrix.value.store.repositories}}
#          authorization: ${{ env.AUTH }}
#          postprocess: .github/flat/installation.ts
