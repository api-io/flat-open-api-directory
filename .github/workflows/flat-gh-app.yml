
name: scraping app installations

on:
  push:
    paths:
      - .github/workflows/flat-gh-app.yml # Only run a new workflow every time this file (flat.yaml) file changes
      - flat/*
  workflow_dispatch:
    inputs:
      installations_path: 
        type: string
        description: installation json file URL
  schedule:
    - cron: '0 0 1 * *' # Run this workflow every month on the first day of the month
    

jobs:
  app:
    runs-on: ubuntu-latest
    environment: flat-api-app
    env:
      REPOSITORIES_PATH: ${{vars.REPOSITORIES_PATH || format('store/{0}/repositories', vars.APP_ID )}}
      INSTALLATIONS_PATH: ${{inputs.installations_path || vars.INSTALLATIONS_PATH || format('store/{0}/installations.json', vars.APP_ID) }}
     
    outputs:
      auth: ${{ steps.generate_token.outputs.authorization }}
      token: ${{ steps.generate_token.outputs.token }}
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      environment: flat-api-app
      
    steps: 
      - name: extract installation path
        id: path
        continue-on-error: true         
        run: |
          echo installations path is ${{env.INSTALLATIONS_PATH}} >> $GITHUB_STEP_SUMMARY

      - name: Check out repo
        uses: actions/checkout@v3
  
      - name: Generate token
        id: generate_token
        uses: api-io/github-app-jwt@v1.2.3
        with:
          app_id: ${{ vars.APP_ID }}
          private_key: ${{ secrets.PRIVATE_KEY }}
     
      - name: Setup deno
        uses: denoland/setup-deno@main
        with:
          deno-version: v1.x 

      # The step is a Flat Action step. We fetch the installations of the app and save it at env.INSTALLATIONS_PATH
      - name: Fetch installations 
        uses: githubocto/flat@v3
        env:
          AUTH:  ${{ steps.generate_token.outputs.authorization }}
        with:
          http_url: ${{github.api_url}}/app/installations
          downloaded_filename: ${{env.INSTALLATIONS_PATH}}
          authorization: ${{ env.AUTH }}
          postprocess: .github/flat/app.ts
          
      - id: set-matrix
        run: |
          JSON_RESPONSE=$(cat ${{env.INSTALLATIONS_PATH}})
          echo "matrix=$JSON_RESPONSE" >> "$GITHUB_OUTPUT"
  
  
  installation:
    needs: app
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        value: ${{fromJson(needs.app.outputs.matrix)}}

    environment: ${{needs.app.outputs.environment}}
    steps:

      - name: Check out repo
        uses: actions/checkout@v3

      - name: ensure installation folder
        run: mkdir -p ${{ matrix.value.store.base}}

      - name: create installation token
        id: generate_token
        uses: api-io/github-app-jwt@v1.2.4
        with:
          app_id: ${{ vars.APP_ID }}
          private_key: ${{ secrets.PRIVATE_KEY }}
          installation_id: ${{ matrix.value.id }}

      - name: Setup deno
        uses: denoland/setup-deno@main
        with:
          deno-version: v1.x
      
      - name: create or update repositories for each installation
        uses: githubocto/flat@v3
        env:
          AUTH:  ${{ steps.generate_token.outputs.authorization }}
          META: $(jq -n -c "${{matrix.value}}" )
        with:
          http_url: ${{ matrix.value.repositories_url}}
          downloaded_filename: ${{ matrix.value.store.repositories}}
          authorization: ${{ env.AUTH }}
          postprocess: .github/flat/installation.ts
