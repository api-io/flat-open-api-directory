name: scraping app installations

on:
  push:
    paths:
      - .github/workflows/flat-gh-app.yml # Only run a new workflow every time this file (flat.yaml) file changes
      - flat/*
  workflow_dispatch:
    inputs:
      env:
        description: 'environment'
        required: true
        default: 'flat-api-app'
      gh_api_url:
        description: 'GitHub API URL'
        required: false
      app_id:
        description: 'GitHub App ID'
        required: false
      store:
        type: string
        description: store directory path
  schedule:
    - cron: '0 0 1 * *' # Run this workflow every month on the first day of the month


jobs:
  app:
    runs-on: ubuntu-latest
    environment: ${{inputs.env}}
    env:
      store: ${{inputs.store || vars.STORE || 'store' }}/apps/${{inputs.app_id || vars.APP_ID  || secrets.APP_ID}}
      gh_api_url: ${{inputs.gh_api_url || vars.GH_API_URL || github.api_url}}
      app_id: ${{inputs.app_id  || vars.APP_ID || secrets.APP_ID}}


    outputs:
      token: ${{ steps.token.outputs.token_base64 }}
      matrix: ${{ steps.set-matrix.outputs.installations }}
      environment: ${{inputs.env}}
      installations_path: ${{env.installations_path }}
      installations_index: ${{env.installations_path}}/index.json
      store: ${{env.store}}
      app_path: ${{env.app_path}}
      gh_api_url: ${{env.gh_api_url}}
    
    steps:

      - name: setup store
        id: path
        continue-on-error: true
        run: |
          echo "installations_path=${{env.store}}/installations" >> $GITHUB_ENV
          echo installations path is ${{env.installations_path}} >> $GITHUB_STEP_SUMMARY
          echo "app_path=${{env.store}}/index.json" >> $GITHUB_ENV
          echo app path is ${{env.app_path}} >> $GITHUB_STEP_SUMMARY

      - name: Check out repo
        uses: actions/checkout@v3

      - name: Generate token
        id: generate_token
        uses: api-io/github-app-jwt@v1.2.3
        with:
          app_id: ${{ env.app_id }}
          private_key: ${{ secrets.PRIVATE_KEY }}

      - name: Setup deno
        uses: denoland/setup-deno@main
        with:
          deno-version: v1.x


      - name: ensure installation folder
        run: |
          mkdir -p ${{ env.installations_path}} >> $GITHUB_STEP_SUMMARY
          find ${{ env.installations_path}} 

      - name: fetch app
        uses: githubocto/flat@v3
        env:
          AUTH: ${{ steps.generate_token.outputs.authorization }}
        with:
          http_url: ${{ env.gh_api_url }}/app
          downloaded_filename: ${{env.store}}/index.json
          authorization: ${{ env.AUTH }}
          
          
          # The step is a Flat Action step. We fetch the installations of the app and save it at env.INSTALLATIONS_PATH
      - name: fetch app installations
        uses: githubocto/flat@v3
        env:
          AUTH: ${{ steps.generate_token.outputs.authorization }}
        with:
          http_url: ${{ env.gh_api_url }}/app/installations
          downloaded_filename: ${{env.installations_path}}/index.json
          authorization: ${{ env.AUTH }}

      - id: set-matrix
        run: |
          echo "installations=$(cat ${{env.installations_path}}/index.json)" >> $GITHUB_OUTPUT 
        
        env:
          GH_TOKEN: ${{ github.token }}


  installation:
    needs: app
    runs-on: ubuntu-latest
    env:
      installation_path: ${{needs.app.outputs.installations_path}}/${{ matrix.value.id }}
      gh_api_url: ${{needs.app.outputs.gh_api_url}}
    strategy:
      max-parallel: 1
      matrix:
        value: ${{fromJson(needs.app.outputs.matrix)}}

    environment: ${{needs.app.outputs.environment}}
    steps:

      - name: Check out repo
        uses: actions/checkout@v3

      - name: dispatches reload installation event
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          event-type: reload-installation
          client-payload: ' {
            "type": "installation",
            "id": "${{ matrix.value.id }}",
            "environment": "${{needs.app.outputs.environment}}",
            "gh_api_url": "${{env.gh_api_url}}",
            "flat": {
              "installation": {
                "src": {
                  "type": "github",
                  "href": "${{ env.gh_api_url }}/app/installations/${{ matrix.value.id }}",
                  "authorization": "app"
                },
                "target": {
                  "root": "${{env.installation_path}}",
                  "index": "${{env.installation_path}}/index.json"
                },
                "status": "pending"
              },
              "repositories": {
                "src": {
                  "type": "github",
                  "href": "${{matrix.value.repositories_url}}",
                  "authorization": "installation"
                },
                "target": {
                  "root": "${{env.installation_path}}/repositories",
                  "index": "${{env.installation_path}}/repositories/index.json"
                },
                "status": "pending"
              }
            },
            "context": {
              "store": "${{env.store}}",
              "app": {
                "src": {
                  "type": "github",
                  "href": "${{ env.gh_api_url }}/app",
                  "authorization": "app"
                },
                "target": {
                  "root": "${{needs.app.outputs.store}}",
                  "index": "${{needs.app.outputs.app_path}}"
                },
                "status": "flatten"
              },
              "installations": {
                "src": {
                  "type": "github",
                  "href": "${{ env.gh_api_url }}/app/installations",
                  "authorization": "app"
                },
                "target": {
                  "root": "${{needs.app.outputs.installations_path}}",
                  "index": "${{needs.app.outputs.installations_index}}"
                },
                "status": "flatten"
              }
            }
          }'
          
 