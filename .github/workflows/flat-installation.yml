
name: scraping installation

on:
  

  repository_dispatch:
    types: ["reload-installation"]
  
run-name: flat installation ${{ github.event.client_payload.id }}
    
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: false

jobs:
  installation:
    runs-on: ubuntu-latest
    environment: ${{ github.event.client_payload.environment }}
    outputs:
      repositories_path: ${{ env.repositories_path }}
      matrix: ${{ steps.json.outputs.repositories }}
      environment: ${{ github.event.client_payload.environment }}
      store: ${{ github.event.client_payload.store }}
    env:
      installation_id: ${{ github.event.client_payload.id }}
      index_url: ${{ github.event.client_payload.flat.installation.src.href }}
      repositories_url: ${{ github.event.client_payload.flat.repositories.src.href }}
      installation_path: ${{github.event.client_payload.flat.installation.target.root }}
      installation_index: ${{github.event.client_payload.flat.installation.target.index }}
      repositories_path:  ${{github.event.client_payload.flat.repositories.target.root }}
      repositories_index:  ${{github.event.client_payload.flat.repositories.target.index }}
      gh_api_url: ${{github.event.client_payload.gh_api_url || vars.GH_API_URL || github.api_url}} 
    steps:

      - name: Check out repo
        uses: actions/checkout@v3

      - name: Setup deno
        uses: denoland/setup-deno@main
        with:
          deno-version: v1.x
#          
#      - name: setup store
#        id: path
#        run: |
#          echo "installation_path=${{env.store}}/installations/${{env.id}}">> $GITHUB_ENV
#          echo "repositories_path=$installation_path/repositories">> $GITHUB_ENV
      - name: set app_id
        run: echo "APP_ID=${{vars.APP_ID}}" >> $GITHUB_ENV
        if: ${{ !env.ACT }}
      
      
      - name: ensure folders
        run: |
          mkdir -p $installation_path
          mkdir -p $repositories_path
          echo "::debug::${{env.gh_api_url}}"
          echo "::debug::client_payload ${{toJSON(github.event.client_payload)}}"
          echo "::debug::repositories_url ${{env.repositories_url}}"
          echo "::debug::APP_ID ${{env.APP_ID}}"

      - name: create app token
        id: app_token
        uses: api-io/github-app-jwt@v1.2.4
        with:
          github_api_url: ${{ env.gh_api_url }}
          private_key: ${{ secrets.PRIVATE_KEY }}
          app_id: ${{env.APP_ID}}



      - name: fetch installation
        uses: githubocto/flat@v3
        env:
          AUTH:  ${{ steps.app_token.outputs.authorization }}
        with:
          http_url: ${{env.index_url}}
          downloaded_filename: ${{env.installation_index}}
          authorization: ${{ env.AUTH }}
#      - name: install gh-cli
#        run: |
#            curl -sL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo tee /usr/share/keyrings/githubcli-archive-keyring.gpg > /dev/null
#            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
#            sudo apt update
#            sudo apt install gh
          
      - name: create installation token
        id: i_token
        uses: api-io/github-app-jwt@v1.2.4
        with:
          github_api_url: ${{ env.gh_api_url }}
          private_key: ${{ secrets.PRIVATE_KEY }}
          app_id: ${{env.APP_ID}}
          installation_id: ${{env.installation_id}}
          
#      - name: create installation token
#        id: i_token_1
#        continue-on-error: false
#        env:
#          GH_TOKEN: ${{ steps.app_token.outputs.token }}
#          AUTH: bearer ${{ steps.app_token.outputs.token }}
#        run: |
#          echo "authorization=$AUTH" >> $GITHUB_ENV
#          gh api -X POST -H "authorization:bearer ${{env.AUTH}}" /app/installations/$id/access_tokens 
#          echo "token=$(gh api -X POST -H "authorization:bearer ${{env.AUTH}}" /app/installations/$id/access_tokens --jq -r '.token')" >> $GITHUB_OUTPUT
 
 
      - name: fetch repositories
        uses: githubocto/flat@v3
        env:
          AUTH: bearer ${{ steps.i_token.outputs.token }}
        with:
          http_url: ${{ env.repositories_url }}
          downloaded_filename: ${{env.repositories_index}}
          authorization: ${{ env.AUTH }}

      - id: json
        name: set output
        run: |
          jq  -c  -r '.repositories' "${{env.repositories_index}}" > "${{env.repositories_path}}/list.json"
          repositories="$(cat ${{env.repositories_path}}/list.json)"
          echo "repositories=$repositories" >> $GITHUB_ENV
          echo "repositories=$repositories" >> $GITHUB_OUTPUT
    
      - name: debug
        continue-on-error: true
        run: |
          reps=$(jq  -c  -r '.repositories' '${{env.repositories_index}}' )
          echo "::notice:: from jq with \( $rep and quotes"
          rep="$(jq  -c  -r '.repositories' '${{env.repositories_index}}')"
          echo "::notice:: from jq with \( $rep"
          
      - name: debug-b
        continue-on-error: true
        run: |
          rep=`jq  -c  -r '.repositories' "${{env.repositories_index}}"`
          echo "::notice:: from jq with \` $rep"

      - name: debug-c
        continue-on-error: true
        run: |
          echo "::notice:: repositories $repositories"
          echo "::notice:: cat $(cat ${{env.repositories_path}}/list.json)"
          echo "::notice:: outputs ${{steps.json.outputs.repositories}}"


    # echo "rpos=`jq  -c  -r '.repositories' "${{env.repositories_path}}/index.json'` >> $GITHUB_OUTPUT

#          echo `jq  -c  -r '.repositories' "${{env.repositories_path}}/index.json"`
  
  #          jq  -c  -r '.repositories' ${{env.repositories_path}}/index.json" > ${{env.repositories_path}}/index.json
  
  
  debug:
    needs: installation
    runs-on: ubuntu-latest
    steps:
      - name: debug
        continue-on-error: true
        run: |
          echo "::notice:: debug job repositories $repositories"
          echo "::notice:: debug job cat $(cat ${{env.repositories_path}}/list.json)"
          echo "::notice:: debug job outputs ${{needs.installation.outputs.matrix}}"
 
  repositories:
    needs: installation
    runs-on: ubuntu-latest
    env:
      repository_path: ${{needs.installation.outputs.repositories_path}}/${{ matrix.value.name }}
    strategy:
      max-parallel: 1
      matrix:
        value: ${{fromJson(needs.installation.outputs.matrix)}}

    environment: ${{needs.installation.outputs.environment}}
    steps:

      - name: Check out repo
        uses: actions/checkout@v3

      - name: dispatches reload repository event
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          event-type: repository:reload
          client-payload: '{
            "type": "repository",
            "id": "${{ matrix.value.id }}",
            "src": "${{ matrix.value.url }}",
            "name": "${{ matrix.value.name }}",
            "full_name": "${{ matrix.value.full_name }}",
            "environment": "${{needs.installation.outputs.environment}}" ,            
            "store": "${{needs.installation.outputs.store}}", 
             "links":{
                "blobs": "${{ matrix.value.blobs_url }}",
                "tags": "${{ matrix.value.git_tags_url }}",
                "refs": "${{ matrix.value.git_refs_url }}",
                "git": "${{ matrix.value.git_url }}",
                "hooks": "${{ matrix.value.hooks_url }}",
                "notifications": "${{ matrix.value.notifications_url }}",
                "pulls": "${{ matrix.value.pulls_url }}",
                "releases": "${{ matrix.value.releases_url }}",
                "comments": "${{ matrix.value.comments_url }}",
                "contents": "${{ matrix.value.contents_url }}"
            }
          }'
