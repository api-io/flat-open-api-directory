name: flat-installations
on:
  push:
    paths:
      - .github/workflows/flat-installations.yml # Only run a new workflow every time this file (flat.yaml) file changes
      - store/installations.json
  workflow_dispatch:
    inputs:
      installations_path: 
        type: string
        description: installation json file URL
jobs:

  setup:
    environment: flat-api-app
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      i_file_format: ${{ steps.path.outputs.i_file_format }}
      repositories_dir: ${{ env.REPOSITORIES_PATH }}
    env:
      REPOSITORIES_PATH: ${{vars.REPOSITORIES_PATH || format('store/{0}/repositories', vars.APP_ID )}}
      INSTALLATIONS_PATH: ${{inputs.installations_path || vars.INSTALLATIONS_PATH || format('store/{0}/installations.json', vars.APP_ID) }}

    steps:
      - uses: actions/checkout@v3
      - name: extract installation path
        run: |
          echo installations path is ${{env.INSTALLATIONS_PATH}} >> $GITHUB_STEP_SUMMARY
      - name: extract repositories path
        id: path
        run: |
          echo REPOSITORIES_PATH=${{env.REPOSITORIES_PATH}} >> "$GITHUB_ENV"
          echo i_file_format=${{env.REPOSITORIES_PATH}}/{0}.json >> "$GITHUB_OUTPUT"
          echo repositories path is ${{env.REPOSITORIES_PATH}} >> $GITHUB_STEP_SUMMARY
      - id: set-matrix
        run: |
          JSON_RESPONSE=$(cat ${{env.INSTALLATIONS_PATH}}) >> $GITHUB_STEP_SUMMARY
          echo "matrix=$JSON_RESPONSE" >> "$GITHUB_OUTPUT"
  
  
  
  scheduled:
    environment: flat-api-app
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        value: ${{fromJson(needs.setup.outputs.matrix)}}
    steps:
      # The first step is to check out the repository so it can read the files inside of it and do other operations
      - name: Check out repo
        uses: actions/checkout@v3
        
      - name: set installation repos file path
        run: |
          echo "INSTALLATION_REPO_PATH=${{format(needs.setup.outputs.i_file_format, matrix.value.id)}}" >> "$GITHUB_ENV"

      - name: print logs
        run: |
          echo "working on ${{matrix.value.id}}" > $GITHUB_STEP_SUMMARY 
          echo installation repo path is ${{env.INSTALLATION_REPO_PATH}} >> $GITHUB_STEP_SUMMARY

     # Generates github app token 
      - name: Generate token
        id: generate_token
        uses: api-io/github-app-jwt@v1.2.4
        with:
          app_id: ${{ vars.APP_ID }}
          private_key: ${{ secrets.PRIVATE_KEY }}
          installation_id: ${{ matrix.value.id }}
          
      - name: Print token
        env:
          TOKEN: ${{ steps.generate_token.outputs.token }}
          AUTH: ${{ steps.generate_token.outputs.authorization }}
        run: |
          echo "The generated token is masked: ${TOKEN} authorization: ${AUTH}"  > $GITHUB_STEP_SUMMARY 
     
      # This step installs Deno, which is a new Javascript runtime that improves on Node. 
      - name: Setup deno
        uses: denoland/setup-deno@main
        with:
          deno-version: v1.x 
          


      - name: create directory if not exists
        run: |
          mkdir -p ${{needs.setup.outputs.repositories_dir}}


      # The step is a Flat Action step. We fetch the repositories who installed the app and save it as repositories.json
      - name: Fetch data 
        uses: githubocto/flat@v3
        env:
          AUTH:  ${{ steps.generate_token.outputs.authorization }}
        with:
          http_url:  ${{ matrix.value.repositories_url}}
          downloaded_filename: ${{env.INSTALLATION_REPO_PATH}}
          authorization: ${{ env.AUTH }}
      
          
    needs: [ setup ]
    
  
  # go over the repositories files in (needs.setup.outputs.repositories_dir) and create an index.json file with array of all repositories
  index:
    runs-on: ubuntu-latest
    needs: [ setup, scheduled ] 
    steps:
      - name: iterate files in directory and merge jsons into index.json
        run: |
          echo "working on ${{needs.setup.outputs.repositories_dir}}" > $GITHUB_STEP_SUMMARY
          file_list=$(ls ${{needs.setup.outputs.repositories_dir}}) 
          echo "file_list=$file_list" >> $GITHUB_STEP_SUMMARY
          index_file=${{needs.setup.outputs.repositories_dir}}/index.json 
          echo $index_file >> $GITHUB_STEP_SUMMARY
          repositories=()
          for file in $file_list;
            do
                text=$(cat $file)
                json=${{fromJSON(text)}} 
                repositories+=$json.repositories
            done;
          echo "repositories=$repositories" >> $GITHUB_STEP_SUMMARY
          echo "repositories=${{toJson(repositories)}}" > $index_file
