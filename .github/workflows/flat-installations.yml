name: flat-installations
on:
  push:
    paths:
      - .github/workflows/flat-installations.yml # Only run a new workflow every time this file (flat.yaml) file changes
      - store/installations/index.json
  workflow_dispatch:
    inputs:
      installations_path: 
        type: string
        description: installation json file URL
jobs:

  setup:
    environment: flat-api-app
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      repositories_dir: ${{ env.REPOSITORIES_PATH }}
      installations_dir: ${{ env.INSTALLATIONS_PATH }}
      index_file: ${{ env.REPOSITORIES_PATH }}/index.json
    env:
      REPOSITORIES_PATH: ${{ vars.REPOSITORIES_PATH || format('store/{0}/repositories', vars.APP_ID )}}
      INSTALLATIONS_PATH: ${{ inputs.installations_path || vars.INSTALLATIONS_PATH || format('store/{0}/installations', vars.APP_ID) }}
    steps:
      - uses: actions/checkout@v3
      - name: extract installation path
        run: |
      - name: logs
        run: |
          echo installations path is ${{ env.INSTALLATIONS_PATH }} >> $GITHUB_STEP_SUMMARY
          echo repositories path is ${{ env.REPOSITORIES_PATH }} >> $GITHUB_STEP_SUMMARY
      - id: set-matrix
        run: |
          JSON_RESPONSE=$(cat ${{env.INSTALLATIONS_PATH}}/index.json)
          echo "matrix=$JSON_RESPONSE" >> "$GITHUB_OUTPUT"
  
  
  scheduled:
    environment: flat-api-app
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        value: ${{fromJson(needs.setup.outputs.matrix)}}
    steps:
      # The first step is to check out the repository so it can read the files inside of it and do other operations
      - name: Check out repo
        uses: actions/checkout@v3
        
      - name: set installation repos file path
        run: |
          INSTALLATION_DIR="${{needs.setup.outputs.installations_dir}}/${{matrix.value.id}}" 
          echo "INSTALLATION_DIR=$INSTALLATION_DIR" >> "$GITHUB_ENV"
          echo "INSTALLATION_REPO_PATH=$INSTALLATION_DIR/repos.json" >> "$GITHUB_ENV"
          echo "INSTALLATION_PATH=$INSTALLATION_DIR/installation.json" >> "$GITHUB_ENV"
          echo "INDEX_PATH=$INSTALLATION_DIR/index.json" >> "$GITHUB_ENV"
   
      - name: print logs
        run: |
          echo "working on ${{matrix.value.id}}" > $GITHUB_STEP_SUMMARY 
          echo installation repo path is ${{env.INSTALLATION_REPO_PATH}} >> $GITHUB_STEP_SUMMARY
          echo installation dir path is ${{env.INSTALLATION_DIR}} >> $GITHUB_STEP_SUMMARY
          echo installation path is ${{env.INSTALLATION_PATH}} >> $GITHUB_STEP_SUMMARY
          echo index path is ${{env.INDEX_PATH}} >> $GITHUB_STEP_SUMMARY

     # Generates github app token 
      - name: Generate token
        id: generate_token
        uses: api-io/github-app-jwt@v1.2.4
        with:
          app_id: ${{ vars.APP_ID }}
          private_key: ${{ secrets.PRIVATE_KEY }}
          installation_id: ${{ matrix.value.id }}
     
      # This step installs Deno, which is a new Javascript runtime that improves on Node. 
      - name: Setup deno
        uses: denoland/setup-deno@main
        with:
          deno-version: v1.x 
          


      - name: create directory if not exists
        run: |
          mkdir -p ${{needs.setup.outputs.repositories_dir}}
          mkdir -p ${{needs.setup.outputs.installations_dir}}
          mkdir -p ${{env.INSTALLATION_DIR}}
          mkdir -p tmp
          
          



      # The step is a Flat Action step. We fetch the repositories who installed the app and save it as repositories.json
      - name: Fetch data 
        uses: githubocto/flat@v3
        env:
          AUTH:  ${{ steps.generate_token.outputs.authorization }}
        with:
          http_url:  ${{ matrix.value.repositories_url}}
          downloaded_filename: ${{env.INSTALLATION_REPO_PATH}}
          authorization: ${{ env.AUTH }}
          
#          postprocess: deno run --allow-read --allow-write --allow-env --allow-net https://deno.land/x/jq/mod.ts --slurp . > ${{env.INSTALLATION_REPO_PATH}}
      - name: update installation data
        run: |
          jq -n -c '${{toJSON(matrix.value)}}'  > ${{env.INSTALLATION_PATH}}

#      - name: jq -n
#        id: jq
#        continue-on-error: true
#        run: |
#          jq add -s -c '${{toJSON(matrix.value)}}'  $INSTALLATION_REPO_PATH  > tmp/install
#          echo "tmp/install is $(cat tmp/install)" 

      - name: jq add
        id: jq2
        continue-on-error: true  
        run: |
          jq -s -c add ${{env.INSTALLATION_REPO_PATH}} ${{env.INSTALLATION_PATH}} > ${{env.INDEX_PATH}}

#
#      - name: jq add
#        id: jq3
#        continue-on-error: true
#
#        run: |
#          jq '. * input' $INSTALLATION_REPO_PATH $INSTALLATION_PATH >   ${{env.INDEX_PATH}}
#        if: steps.jq2.outcome == 'failure'
#
#      - name: copy
#        id: jq4
#        continue-on-error: true
#        run: |
#          jq '. * input' $INSTALLATION_REPO_PATH $INSTALLATION_PATH >  ${{env.INDEX_PATH}}
#        if: steps.jq3.outcome == 'failure'
#        
#      - name: update index
#        continue-on-error: true
#        run: |
#          jq '. + $data[0] | {(.account.login): .}' ${{needs.setup.outputs.index_file}} --slurpfile data ${{env.INDEX_PATH}} -c > tmp/index
#     
      - name: update tmp index
        run: |
          cat ${{env.INDEX_PATH}} >> tmp/index
      
#      - name: move tmp files
#        run: |
#          mv $tmp_index ${{needs.setup.outputs.index_file}}
#          mv $tmp ${{env.INSTALLATION_REPO_PATH}}
#          rm $tmp_install
#          rm $tmp


      - name: echo logs
        run: |
          echo $(cat tmp/index) >> $GITHUB_STEP_SUMMARY
          
      - name: add files to git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add ${{env.INSTALLATION_DIR}}/*
          git commit -m "update installation data"
          git push
    
    needs: [ setup ]
    
  
  # go over the repositories files in (needs.setup.outputs.repositories_dir) and create an index.json file with array of all repositories
#  index:
#    runs-on: ubuntu-latest
#    needs: [ setup, scheduled ] 
#    steps:
#      - name: iterate files in directory and merge jsons into index.json
#        run: |
#          echo "working on ${{needs.setup.outputs.repositories_dir}}" > $GITHUB_STEP_SUMMARY
#          file_list=$(ls ${{needs.setup.outputs.repositories_dir}}) 
#          echo "file_list=$file_list" >> $GITHUB_STEP_SUMMARY
#          index_file=${{needs.setup.outputs.repositories_dir}}/index.json 
#          echo $index_file >> $GITHUB_STEP_SUMMARY
#          
#          repositories=()
#          for file in $file_list;
#            do
#                text=`cat $file`
#                json=`echo $(jq -r '.repositories' <<< "$text")`
#                repositories+=json
#            done;
#          echo "repositories=$repositories" >> "$GITHUB_OUTPUT"
#          echo "$repositories" > "$index_file"

