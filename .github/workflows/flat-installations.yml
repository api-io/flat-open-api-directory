name: flat-installations
on:
  push:
    paths:
      - .github/workflows/flat-installations.yml # Only run a new workflow every time this file (flat.yaml) file changes
      - store/installations/index.json
  workflow_dispatch:
    inputs:
      installations_path: 
        type: string
        description: installation json file URL
jobs:

  setup:
    environment: flat-api-app
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      installations_dir: ${{ env.INSTALLATIONS_PATH }}
      index_file: ${{env.INSTALLATIONS_PATH}}/index.jsonl
      branch: ${{steps.git.outputs.branch}}
    env:
      REPOSITORIES_PATH: ${{ vars.REPOSITORIES_PATH || format('store/{0}/repositories', vars.APP_ID )}}
      INSTALLATIONS_PATH: ${{ inputs.installations_path || vars.INSTALLATIONS_PATH || format('store/{0}/installations', vars.APP_ID) }}
    steps:
      - uses: actions/checkout@v3
#        with:
#          path: main
        
      - name: checkout temporary branch
        id: git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          branch=flat/runs/installations/${{github.run_id}}
          echo "branch=$branch" >> "$GITHUB_OUTPUT"
          git checkout -b $branch
          git tag flat -m "initiate flat installation ${{matrix.value.id}}"
          git push --set-upstream origin $branch
      
      - name: extract installation path
        run: |
      - name: logs
        run: |
          echo installations store ${{ env.INSTALLATIONS_PATH }} >> $GITHUB_STEP_SUMMARY
      
      - id: set-matrix
        run: |
          JSON_RESPONSE=$(cat ${{env.INSTALLATIONS_PATH}}/index.json)
          echo "matrix=$JSON_RESPONSE" >> "$GITHUB_OUTPUT"

      - name: create or clean directories
        run: |
          mkdir -p  ${{ env.INSTALLATIONS_PATH }}
          rm -rf  ${{ env.INSTALLATIONS_PATH }}/*
          mkdir -p ${{env.INSTALLATIONS_PATH}}/tmp
          touch ${{env.INSTALLATIONS_PATH}}/index.jsonl
          git add .
#      - name: commit changes
#        run: |
##          cd main
#           git add .
  
  scheduled:
    environment: flat-api-app
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        value: ${{fromJson(needs.setup.outputs.matrix)}}
    env:
      INSTALLATION_DIR: ${{needs.setup.outputs.installations_dir}}/${{matrix.value.id}}
      BRANCH: ${{needs.setup.outputs.branch}}
      
    steps:
      # The first step is to check out the repository so it can read the files inside of it and do other operations
      - name: Check out repo
        uses: actions/checkout@v3
        with:
          ref: ${{env.BRANCH}}
#          path: ${{env.INSTALLATION_DIR}}

      - name: checkout temporary installation branch
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          branch=flat/${{matrix.value.id}}/${{github.run_id}}
          git checkout -b $branch
          git tag flat -m "initiate flat installation ${{matrix.value.id}}"
          git push --set-upstream origin $branch
      
      - name: set installation repos file path
        run: |
          echo "REPOS_FILE=$INSTALLATION_DIR/repos.json" >> "$GITHUB_ENV"
          echo "META_FILE=$INSTALLATION_DIR/meta.json" >> "$GITHUB_ENV"
          echo "INSTALLATION_FILE=$INSTALLATION_DIR/index.json" >> "$GITHUB_ENV"
   
      - name: print logs
        run: |
          echo "working on ${{matrix.value.id}}" > $GITHUB_STEP_SUMMARY 
          echo installation repo path is ${{env.REPOS_FILE}} >> $GITHUB_STEP_SUMMARY
          echo installation dir path is ${{env.INSTALLATION_DIR}} >> $GITHUB_STEP_SUMMARY
          echo installation path is ${{env.META_FILE}} >> $GITHUB_STEP_SUMMARY
          echo index path is ${{env.INSTALLATION_FILE}} >> $GITHUB_STEP_SUMMARY

     # Generates github app token 
      - name: Generate token
        id: generate_token
        uses: api-io/github-app-jwt@v1.2.4
        with:
          app_id: ${{ vars.APP_ID }}
          private_key: ${{ secrets.PRIVATE_KEY }}
          installation_id: ${{ matrix.value.id }}
     
      # This step installs Deno, which is a new Javascript runtime that improves on Node. 
      - name: Setup deno
        uses: denoland/setup-deno@main
        with:
          deno-version: v1.x 
          


      - name: create directory if not exists
        run: |
          mkdir -p ${{env.INSTALLATION_DIR}}
          rm -rf ${{env.INSTALLATION_DIR}}/*
          touch ${{env.INSTALLATION_FILE}}
      
      
      - name: update installation metadata
        run: |
          jq -n -c '${{toJSON(matrix.value)}}'  > ${{env.META_FILE}}
          
      # The step is a Flat Action step. We fetch the repositories who installed the app and save it as repositories.json
      - name: Fetch data 
        uses: githubocto/flat@v3
        env:
          AUTH:  ${{ steps.generate_token.outputs.authorization }}
        with:
          http_url:  ${{ matrix.value.repositories_url}}
          downloaded_filename: ${{env.REPOS_FILE}}
          authorization: ${{ env.AUTH }}
          

      - name: create installation index 
        id: jq
        run: |
          jq -s -c add ${{env.REPOS_FILE}} ${{env.META_FILE}} > ${{env.INSTALLATION_FILE}}


      - name: update application index
        run: |
          cat ${{env.INSTALLATION_FILE}} >> ${{needs.setup.outputs.index_file}}
      
      - name: echo logs
        run: |
          echo $(cat ${{needs.setup.outputs.index_file}}) >> $GITHUB_STEP_SUMMARY
          
      - name: add files to git
        run: |
          git add ${{env.INSTALLATION_DIR}}/*
          git commit --amend --no-edit
          git push -f
          gh pr create --fill --base ${{env.BRANCH}} --head HEAD --label flat "inst(${{ matrix.value.id }})"  >> $GITHUB_STEP_SUMMARY
    needs: [ setup ]
    
  index:
    runs-on: ubuntu-latest
    needs: [ setup, scheduled ]
    steps:
      - name: add index file to git
        run: | 
          git add ${{needs.setup.outputs.index_file}}
          git -m "flat: update application index file"
          git push -f
          
      - name: open PR to main
        run: |
            gh pr create --fill --base main --label flat >> $GITHUB_STEP_SUMMARY
            
          
  # go over the repositories files in (needs.setup.outputs.repositories_dir) and create an index.json file with array of all repositories
#  index:
#    runs-on: ubuntu-latest
#    needs: [ setup, scheduled ] 
#    steps:
#      - name: iterate files in directory and merge jsons into index.json
#        run: |
#          echo "working on ${{needs.setup.outputs.repositories_dir}}" > $GITHUB_STEP_SUMMARY
#          file_list=$(ls ${{needs.setup.outputs.repositories_dir}}) 
#          echo "file_list=$file_list" >> $GITHUB_STEP_SUMMARY
#          index_file=${{needs.setup.outputs.repositories_dir}}/index.json 
#          echo $index_file >> $GITHUB_STEP_SUMMARY
#          
#          repositories=()
#          for file in $file_list;
#            do
#                text=`cat $file`
#                json=`echo $(jq -r '.repositories' <<< "$text")`
#                repositories+=json
#            done;
#          echo "repositories=$repositories" >> "$GITHUB_OUTPUT"
#          echo "$repositories" > "$index_file"

